#include<bits/stdc++.h>
#define REP(i,n) for (int i = 1; i <= n; i++)
#define mod 1000000007
#define pb push_back
#define ff first
#define ss second
#define ii pair<int,int>
#define vii vector<ii>
#define lli long long int
#define INF 1000000000
#define endl '\n'
const double PI = 3.141592653589793238460;
typedef std::complex<double> Complex;
typedef std::valarray<Complex> CArray;
using namespace std;
vector<int> arr[10001];
int visit[10001];	
int dist[10001];
vector<int> primes;
bool isValid(int a,int b){
	int c=0;
	while(a>0){
		if(a%10!=b%10)c++;
		a/=10,b/=10;
	}
	if(c==1)return true;
	return false;
}
bool isPrime(int a){
	for(int i=2;i*i<=a;i++)
	if(a%i==0)return false;
	
	return true;
}
void bfs(int n){
	visit[n]=1;
	dist[n]=0;
	queue<int> q;
	q.push(n);
	while(!q.empty()){
		int curr=q.front();
		q.pop();
		for(int child:arr[curr]){
			if(visit[child]==0){
				visit[child]=1;
				dist[child]=dist[curr]+1;
				q.push(child);
			}
		}
	}
}
void buildGraph(){
	for(int i=1000;i<=9999;i++){
		if(isPrime(i))primes.push_back(i);
	}
	for(int i=0;i<primes.size();i++){
		for(int j=i+1;j<primes.size();j++){
			int a=primes[i];
			int b=primes[j];
			if(isValid(a,b))arr[a].push_back(b),arr[b].push_back(a);
		}
	}
}
int main(){
	int t,a,b;
	cin>>t;
	buildGraph();
	while(t--){
		for(int i=1000;i<=9999;i++){
			dist[i]=-1;
			visit[i]=0;
		}
		
		cin>>a>>b;
		bfs(a);
		if(dist[b]==-1)cout<<"Impossible"<<endl;
		else
		cout<<dist[b]<<endl;
	
	}return 0;
}
