#include<bits/stdc++.h>
#define REP(i,n) for (int i = 1; i <= n; i++)
#define mod 1000000007
#define pb push_back
#define ff first
#define ss second
#define ii pair<int,int>
#define vii vector<ii>
#define lli long long int
#define INF 1000000000
#define endl '\n'
const double PI = 3.141592653589793238460;
typedef std::complex<double> Complex;
typedef std::valarray<Complex> CArray;
using namespace std;
vector<int> arr[1000001];
int dist[1000001];
int visited[1000001];
int level[1000001];
void bfs(int node){
	queue<int> q;
	q.push(node);
	visited[node]=1;
	dist[node]=0;
	
	while(!q.empty()){
		int curr=q.front();
		q.pop();
		for(int child:arr[curr]){
		if(visited[child]==0){
		visited[child]=1;
		dist[child]=dist[curr]+1;
		level[dist[child]]++;
		q.push(child);}}
		}
}
int main(){
	int n,m,a,b,t,x,y;
	cin>>n>>m;
	for(int i=1;i<=m;i++){
		cin>>a>>b;
		arr[a].push_back(b);
		arr[b].push_back(a);
	}
	cin>>t;
	
	while(t--){
	    int cc=0;
		cin>>x>>y;
		for(int i=0;i<=n;i++){
	     visited[i]=0;level[i]=0;
		}
		bfs(x);
		
		
		cout<<level[y]<<endl;		
	}
	return 0;
}

